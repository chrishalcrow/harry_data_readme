[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Experiment summary",
    "section": "",
    "text": "TEST. This experiment is designed to find out stuff about memory."
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "Experiment summary",
    "section": "",
    "text": "TEST. This experiment is designed to find out stuff about memory."
  },
  {
    "objectID": "index.html#experiment-and-session-types",
    "href": "index.html#experiment-and-session-types",
    "title": "Experiment summary",
    "section": "Experiment and session Types",
    "text": "Experiment and session Types\nSeveral different experiment types were considered. Each experiment contains sessions. Each session has an abbreviated label such as OF1. Knowing which label you are looking for will help when accessing the data.\nHere, we summarise each experiment type and the sessions within each experiment.\n\n\nOpen field -&gt; VR -&gt; Open field\n\nOF1. The mouse explores the open field arena for 20 minutes.\nVR. The mouse is transferred to a head fixed VR enviroment doing a memory task. Description of memory task.\nOF2. The mouse is returned to the open field arena for another 20 minutes of free exploration.\n\n\n\nOpen field -&gt; VR multi context -&gt; Open field\n\n\n\n\nVisual Coding\n\n\n\n\nVisual Sequences\n\n\n\n\nVisual multi-sequences"
  },
  {
    "objectID": "index.html#folder-structure",
    "href": "index.html#folder-structure",
    "title": "Experiment summary",
    "section": "Folder Structure",
    "text": "Folder Structure\n\nRaw data\nThe raw data is organised as follows:\ndata_folder/\n    Cohort_folder/\n        session_folder/\n            M{mouse}_D{day}_datetime_{session_abbreviation}/\nwhere datetime is the time the session began.\nFor example, the VR data for mouse 25, day 25 in stored in\n\"data_folder/Cohort12_august2024/vr/M25_D25_2024-11-13_13-59-48_VR1\"\nWithin each folder is the raw data extracted during the experiment. Depending on the session, this might contain electrophysiology data, behavioural data or both. Find out more in the Datatypes section below.\n\n\nDerived data\nThe derived data is organised as follows:\nderivatives_folder/\n    M{mouse}/\n        D{day}/\n            full/\n            {session_type_1}/\n            {session_type_2}/\n            ...\nSo that each experiment is grouped togehter. The information in full is shared between all sessions in the experiment (e.g. if all the data is sorted together, the sorted data is stored here) while information unique to each session is stored in the session_type_n folder. This folder can contain many pieces of data. Each is described in the DataTypes section below.\n\n\nAn example\n\nOn day 25, mouse 25 took part in the OF1-&gt;VR-&gt;OF2 experiment. Its derivatives folder looks like\nM25/D25/\n    full/\n        kilosort4/\n            kilosort4_report/\n            kilosort4_sa/\n        rec_samples.json\n    of1/\n        dlc/\n        Figures/\n        kilosort4/\n            spikes.pkl\n        position_data.csv\n        theta_phase.pkl\n    vr/\n        Figures/\n        kilosort4/\n            spikes.pkl\n        position_data.csv\n        theta_phase.pkl\n    of2/ \n        dlc/\n        Figures/\n        kilosort4/\n            spikes.pkl\n        position_data.csv\n        theta_phase.pkl\nAnd more! Each of the folders contain more data and outputs. Importantly, the data which depends on the sorting algorithm used are contained in a folder named for that algorithm. E.g. the spikes.pkl file contains the spike times generated by the kilosort4 algorithm so belong to this folder. The data contained here is described in detail in the Datatypes section below."
  },
  {
    "objectID": "index.html#accessing-data",
    "href": "index.html#accessing-data",
    "title": "Experiment summary",
    "section": "Accessing data",
    "text": "Accessing data\nHere we summarise the most important data for collaborators to access.\n\nRaw Ephys recordings\nStored at\ndata_folder/Cohort_folder/session_folder/M1_D1_datetime_{session}/\nOpenphys files. Roughly a large binary file with some metadata.\nThese can be read using spikeinterface e.g.\nimport spikeinterface.full as si\npath_to_recording = \"Cohort12_august2024/of/M25_D25_2024-11-13_13-32-25_OF1/\"\nrecording = si.read_openephys(path_to_recording)\n\n\nSortingAnalyzer\nStored at\nderivatives_folder/M{mouse}/D{day}/full/{sorter_name}_{sorting_protocol}/{sorter_name}_{sorting_protocol}_sa/\nA spikeinterface SortingAnalyzer object, containing spike times and dervied information such as unit templates, spike locations etc. The analyzer depends on the sorter used. We label each sorting protocol by a number. The details of the protocols can be found in the Protocols section.\nCan be read using spikeinterface\nimport spikeinterface.full as si\nsa_path = \"derivatives/M25/D25/full/kilosort4_3/kilosort4_3_sa\"\nsorting_analyzer = si.read_sorting_analyzer(sa_path)\nRead more about SortingAnalyzers here: .\n\n\nSpike Trains\nStored at\nderivatives_folder/M{mouse}/D{day}/session_folder/sorter_folder/spikes.pkl\nA pickle file containing spike trains for each sorted unit, perhaps also with other information. When unpickled, the output is a pandas DataFrame. The unit ids of each unit are contained in the ‘cluster_id’ column and spike trains for each unit are contained in the firing_times column. The cluster_ids match those found in the SortingAnalyzer.\nCan be read using pandas.\nimport pandas as pd\nspike_data = pd.read_pickle(\"derivatives/M25/D25/of1/kilosort/spikes.pkl\")\nall_spike_trains = spike_data[['cluster_id', 'firing_times]]\nspike_train_for_unit_five = all_spike_trains[5]\n\n\nOpen Field Position Data (OF1 + OF2)\nStored at\nderivatives_folder/M{mouse}/D{day}/of{n}/position_data.csv\nA csv file containing position and light pulse data (used for syncing). Position computed using deeplabcut. Important columns are: position_x, position_y and synced_time.\nCan be read using e.g. pandas.\nimport pandas as pd\nposition_data = pd.read_csv(\"derivatives/M25/D25/of1/position_data.csv\")\nposition_x = position_data['position_x']\n\n\nChannel locations in CCF coordinates\nStored at\nderivatives_folder/labels/all_ccf_coords_per_channel.csv\nA .csv file containing the locations of each contact_id of each probe in CCF coordinates. This can be used in conjunction with the raw recording or sorting analyzer to do lots of stuff.\nWhen thinking about clusters, we usually think in terms of channel_ids but their labelling is actually related to how the raw binary file is stored and don’t give any information about the electrode location. That information is stored in the contact_id property of the probe. This makes the code a little messy, since we need a map from channel_ids to contact_ids and another from contact_ids to CCF_coords.\nHere’s how to access this stuff from the raw recording\nimport spikeinterface.full as si\n\nimport pandas as pd\nimport numpy as np\nall_brain_locations = pd.read_csv(\".../all_ccf_coords_per_channel.csv\")\nthis_mouse_brain_locations = all_brain_locations.query('mouse == 25')\n\n# make a dict of contact_ids -&gt; CCF brain coordinates\ncontact_ids_to_CCF = { \n    contact['contact_id']: np.array([contact['z_CCF'], contact['y_CCF'], contact['x_CCF']]) \n    for _, contact in this_mouse_brain_locations.iterrows()\n}\n\n# now make a dict of channel ids -&gt; contact_ids\nrecording = si.read_openephys(\".../M25_D25_2024-11-13_13-32-25_OF1/\")\ncontact_ids = recording.get_probe().contact_ids\nchannel_ids_to_contact_ids = dict(zip(recording.channel_ids, contact_ids[recording.ids_to_indices()]))\n\n# you can then use these dicts to get the brain coordinate for a given channel id\nbrain_coord_for_CH100 = contact_ids_to_CCF[channel_ids_to_contact_ids['CH100']]\nOr you might want to use the CCF coordinates alongside a SortingAnalyzer, e.g. to find out where units are\nsorting_analyzer = si.load_sorting_analyzer(\".../kilosort4_3_sa\")\ncontact_ids = sorting_analyzer.get_probe().contact_ids\n\n# find the extremum channels, which is a dict from unit_id to channel_id\nextremum_channels = si.get_template_extremum_channel(sorting_analyzer)\n\nbrain_coord_for_unit_10 = contact_ids_to_CCF[channel_ids_to_contact_ids[extremum_channels[10]]]"
  },
  {
    "objectID": "index.html#technical-details",
    "href": "index.html#technical-details",
    "title": "Experiment summary",
    "section": "Technical details",
    "text": "Technical details\n\nProtocols"
  }
]