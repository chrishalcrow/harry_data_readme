---
title: Experiment summary
output: html_document
theme: spacelab
format:
  html:
    toc: true
    toc-location: left
---

## Overview

TEST. This experiment is designed to find out stuff about memory. 

## Experiment and session Types

Several different experiment types were considered. Each experiment contains sessions. Each session has an abbreviated label such as OF1. Knowing which label you are looking for will help when accessing the data.

Here, we summarise each experiment type and the sessions within each experiment.

<details>
<summary>Open field -> VR -> Open field</summary>

**OF1**. The mouse explores the open field arena for 20 minutes.

**VR**. The mouse is transferred to a head fixed VR enviroment doing a memory task. Description of memory task. 

**OF2**. The mouse is returned to the open field arena for another 20 minutes of free exploration.
</details>

<details>
<summary>Open field -> VR multi context -> Open field</summary>
</details>

<details>
<summary>Visual Coding</summary>

</details>

<details>
<summary>Visual Sequences</summary>

</details>

<details>
<summary>Visual multi-sequences</summary>

</details>

## Folder Structure

### Raw data

The raw data is organised as follows:

``` python
data_folder/
    Cohort_folder/
        session_folder/
            M{mouse}_D{day}_datetime_{session_abbreviation}/
```

where datetime is the time the session began.

For example, the VR data for mouse 25, day 25 in stored in

```
"data_folder/Cohort12_august2024/vr/M25_D25_2024-11-13_13-59-48_VR1"
```

Within each folder is the raw data extracted during the experiment. Depending on the session, this might contain electrophysiology data, behavioural data or both. Find out more in the Datatypes section below.

### Derived data

The derived data is organised as follows:

``` python
derivatives_folder/
    M{mouse}/
        D{day}/
            full/
            {session_type_1}/
            {session_type_2}/
            ...
```

So that each `experiment` is grouped togehter. The information in `full` is shared between all sessions in the experiment (e.g. if all the data is sorted together, the sorted data is stored here) while information unique to each session is stored in the `session_type_n` folder. This folder can contain *many* pieces of data. Each is described in the DataTypes section below.

<details>
<summary>An example</summary>
On day 25, mouse 25 took part in the OF1->VR->OF2 experiment. Its derivatives folder looks like

```
M25/D25/
    full/
        kilosort4/
            kilosort4_report/
            kilosort4_sa/
        rec_samples.json
    of1/
        dlc/
        Figures/
        kilosort4/
            spikes.pkl
        position_data.csv
        theta_phase.pkl
    vr/
        Figures/
        kilosort4/
            spikes.pkl
        position_data.csv
        theta_phase.pkl
    of2/ 
        dlc/
        Figures/
        kilosort4/
            spikes.pkl
        position_data.csv
        theta_phase.pkl
```

And more! Each of the folders contain more data and outputs. Importantly, the data which depends on the sorting algorithm used are contained in a folder named for that algorithm. E.g. the spikes.pkl file contains the spike times generated by the kilosort4 algorithm so belong to this folder. The data contained here is described in detail in the Datatypes section below.

</details>

## Accessing data

Here we summarise the most important data for collaborators to access.

### Raw Ephys recordings

Stored at
```
data_folder/Cohort_folder/session_folder/M1_D1_datetime_{session}/
```

Openphys files. Roughly a large binary file with some metadata.

These can be read using `spikeinterface` e.g.

``` python
import spikeinterface.full as si
path_to_recording = "Cohort12_august2024/of/M25_D25_2024-11-13_13-32-25_OF1/"
recording = si.read_openephys(path_to_recording)
```

### SortingAnalyzer

Stored at
```
derivatives_folder/M{mouse}/D{day}/full/{sorter_name}_{sorting_protocol}/{sorter_name}_{sorting_protocol}_sa/
```

A `spikeinterface` `SortingAnalyzer` object, containing spike times and dervied information such as unit templates, spike locations etc. The analyzer depends on the sorter used. We label each sorting protocol by a number. The details of the protocols can be found in the [Protocols](#protocols) section.

Can be read using `spikeinterface`
``` python
import spikeinterface.full as si
sa_path = "derivatives/M25/D25/full/kilosort4_3/kilosort4_3_sa"
sorting_analyzer = si.read_sorting_analyzer(sa_path)
```

Read more about `SortingAnalyzer`s here: .

### Spike Trains

Stored at
```
derivatives_folder/M{mouse}/D{day}/session_folder/sorter_folder/spikes.pkl
```

A pickle file containing spike trains for each sorted unit, perhaps also with other information. When unpickled, the output is a pandas DataFrame. The unit ids of each unit are contained in the 'cluster_id' column and spike trains for each unit are contained in the `firing_times` column. The `cluster_id`s match those found in the [SortingAnalyzer](#SortingAnalyzer).

Can be read using `pandas`.

``` python
import pandas as pd
spike_data = pd.read_pickle("derivatives/M25/D25/of1/kilosort/spikes.pkl")
all_spike_trains = spike_data[['cluster_id', 'firing_times]]
spike_train_for_unit_five = all_spike_trains[5]
```



### Open Field Position Data (OF1 + OF2)

Stored at
```
derivatives_folder/M{mouse}/D{day}/of{n}/position_data.csv
```

A csv file containing position and light pulse data (used for syncing). Position computed using deeplabcut. Important columns are: position_x, position_y and synced_time.


Can be read using e.g. `pandas`.

``` python
import pandas as pd
position_data = pd.read_csv("derivatives/M25/D25/of1/position_data.csv")
position_x = position_data['position_x']
```

### Channel locations in CCF coordinates

Stored at
```
derivatives_folder/labels/all_ccf_coords_per_channel.csv
```

A `.csv` file containing the locations of each `contact_id` of each probe in CCF coordinates. This can be used in conjunction with the raw recording or sorting analyzer to do lots of stuff.

When thinking about clusters, we usually think in terms of `channel_ids` but their labelling is actually related to how the raw binary file is stored and don't give any information about the electrode location. That information is stored
in the `contact_id` property of the probe. This makes the code a little messy, since we need a map from `channel_ids` to `contact_ids` and another from `contact_ids` to `CCF_coords`.

Here's how to access this stuff from the raw recording

``` python
import spikeinterface.full as si

import pandas as pd
import numpy as np
all_brain_locations = pd.read_csv(".../all_ccf_coords_per_channel.csv")
this_mouse_brain_locations = all_brain_locations.query('mouse == 25')

# make a dict of contact_ids -> CCF brain coordinates
contact_ids_to_CCF = { 
    contact['contact_id']: np.array([contact['z_CCF'], contact['y_CCF'], contact['x_CCF']]) 
    for _, contact in this_mouse_brain_locations.iterrows()
}

# now make a dict of channel ids -> contact_ids
recording = si.read_openephys(".../M25_D25_2024-11-13_13-32-25_OF1/")
contact_ids = recording.get_probe().contact_ids
channel_ids_to_contact_ids = dict(zip(recording.channel_ids, contact_ids[recording.ids_to_indices()]))

# you can then use these dicts to get the brain coordinate for a given channel id
brain_coord_for_CH100 = contact_ids_to_CCF[channel_ids_to_contact_ids['CH100']]
```

Or you might want to use the CCF coordinates alongside a SortingAnalyzer, e.g. to find out where units are

``` python
sorting_analyzer = si.load_sorting_analyzer(".../kilosort4_3_sa")
contact_ids = sorting_analyzer.get_probe().contact_ids

# find the extremum channels, which is a dict from unit_id to channel_id
extremum_channels = si.get_template_extremum_channel(sorting_analyzer)

brain_coord_for_unit_10 = contact_ids_to_CCF[channel_ids_to_contact_ids[extremum_channels[10]]]
```

## Technical details

### Protocols

